{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vue from 'vue';\nimport { Calendar } from '@fullcalendar/core';\nimport { CustomRenderingStore } from '@fullcalendar/core/internal';\nimport { OPTION_IS_COMPLEX } from './options.js';\nimport { shallowCopy } from './utils.js';\nimport OffscreenFragment from './OffscreenFragment.js';\nimport TransportContainer from './TransportContainer.js';\nconst FullCalendar = Vue.extend({\n  props: {\n    options: Object\n  },\n  data() {\n    return {\n      renderId: 0,\n      customRenderingMap: new Map()\n    };\n  },\n  methods: {\n    getApi() {\n      return getSecret(this).calendar;\n    },\n    buildOptions(suppliedOptions) {\n      return Object.assign(Object.assign({}, suppliedOptions), {\n        customRenderingMetaMap: this.$scopedSlots,\n        handleCustomRendering: getSecret(this).handleCustomRendering,\n        customRenderingReplacesEl: true\n      });\n    }\n  },\n  render(h) {\n    const customRenderingNodes = [];\n    for (const customRendering of this.customRenderingMap.values()) {\n      customRenderingNodes.push(\n      // need stable element reference for list-diffing\n      // TODO: move this functionality within TransportContainer\n      h('div', {\n        key: customRendering.id\n      }, [h(TransportContainer, {\n        key: customRendering.id,\n        props: {\n          inPlaceOf: customRendering.containerEl,\n          reportEl: customRendering.reportNewContainerEl,\n          elTag: customRendering.elTag,\n          elClasses: customRendering.elClasses,\n          elStyle: customRendering.elStyle,\n          elAttrs: customRendering.elAttrs\n        }\n      }, customRendering.generatorMeta(\n      // a slot-render-function\n      customRendering.renderProps))]));\n    }\n    return h('div', {\n      // when renderId is changed, Vue will trigger a real-DOM async rerender, calling beforeUpdate/updated\n      attrs: {\n        'data-fc-render-id': this.renderId\n      }\n    }, [\n    // for containing TransportContainer keys\n    h(OffscreenFragment, customRenderingNodes)]);\n  },\n  mounted() {\n    const customRenderingStore = new CustomRenderingStore();\n    getSecret(this).handleCustomRendering = customRenderingStore.handle.bind(customRenderingStore);\n    const calendarOptions = this.buildOptions(this.options);\n    const calendar = new Calendar(this.$el, calendarOptions);\n    getSecret(this).calendar = calendar;\n    calendar.render();\n    customRenderingStore.subscribe(customRenderingMap => {\n      this.customRenderingMap = customRenderingMap; // likely same reference, so won't rerender\n      this.renderId++; // force rerender\n      getSecret(this).needCustomRenderingResize = true;\n    });\n  },\n  beforeUpdate() {\n    this.getApi().resumeRendering(); // the watcher handlers paused it\n  },\n\n  updated() {\n    if (getSecret(this).needCustomRenderingResize) {\n      getSecret(this).needCustomRenderingResize = false;\n      this.getApi().updateSize();\n    }\n  },\n  beforeDestroy() {\n    this.getApi().destroy();\n  },\n  watch: buildWatchers()\n});\nexport default FullCalendar;\n// storing internal state:\n// https://github.com/vuejs/vue/issues/1988#issuecomment-163013818\nfunction getSecret(inst) {\n  return inst;\n}\nfunction buildWatchers() {\n  let watchers = {\n    // watches changes of ALL options and their nested objects,\n    // but this is only a means to be notified of top-level non-complex options changes.\n    options: {\n      deep: true,\n      handler(options) {\n        let calendar = this.getApi();\n        calendar.pauseRendering();\n        let calendarOptions = this.buildOptions(options);\n        calendar.resetOptions(calendarOptions);\n        this.renderId++; // will queue a rerender\n      }\n    }\n  };\n\n  for (let complexOptionName in OPTION_IS_COMPLEX) {\n    // handlers called when nested objects change\n    watchers[`options.${complexOptionName}`] = {\n      deep: true,\n      handler(val) {\n        // unfortunately the handler is called with undefined if new props were set, but the complex one wasn't ever set\n        if (val !== undefined) {\n          let calendar = this.getApi();\n          calendar.pauseRendering();\n          calendar.resetOptions({\n            // the only reason we shallow-copy is to trick FC into knowing there's a nested change.\n            // TODO: future versions of FC will more gracefully handle event option-changes that are same-reference.\n            [complexOptionName]: shallowCopy(val)\n          }, true);\n          this.renderId++; // will queue a rerender\n        }\n      }\n    };\n  }\n\n  return watchers;\n}","map":{"version":3,"mappings":"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","names":["Vue","Calendar","CustomRenderingStore","OPTION_IS_COMPLEX","shallowCopy","OffscreenFragment","TransportContainer","FullCalendar","extend","props","options","Object","data","renderId","customRenderingMap","Map","methods","getApi","getSecret","calendar","buildOptions","suppliedOptions","customRenderingMetaMap","$scopedSlots","handleCustomRendering","customRenderingReplacesEl","render","h","customRenderingNodes","customRendering","values","push","key","id","inPlaceOf","containerEl","reportEl","reportNewContainerEl","elTag","elClasses","elStyle","elAttrs","generatorMeta","renderProps","attrs","mounted","customRenderingStore","handle","bind","calendarOptions","$el","subscribe","needCustomRenderingResize","beforeUpdate","resumeRendering","updated","updateSize","beforeDestroy","destroy","watch","buildWatchers","inst","watchers","deep","handler","pauseRendering","resetOptions","complexOptionName","val","undefined"],"sourceRoot":"","sources":["../src/FullCalendar.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}