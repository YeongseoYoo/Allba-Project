{"ast":null,"code":"import FullCalendar from '@fullcalendar/vue';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { INITIAL_EVENTS, createEventId } from './event-utils';\nexport default {\n  components: {\n    FullCalendar // make the <FullCalendar> tag available\n  },\n\n  data: function () {\n    return {\n      calendarOptions: {\n        plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin // needed for dateClick\n        ],\n\n        headerToolbar: {\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,timeGridWeek,timeGridDay'\n        },\n        initialView: 'dayGridMonth',\n        initialEvents: INITIAL_EVENTS,\n        // alternatively, use the `events` setting to fetch from a feed\n        editable: true,\n        selectable: true,\n        selectMirror: true,\n        dayMaxEvents: true,\n        weekends: true,\n        select: this.handleDateSelect,\n        eventClick: this.handleEventClick,\n        eventsSet: this.handleEvents\n        /* you can update a remote database when these fire:\r\n        eventAdd:\r\n        eventChange:\r\n        eventRemove:\r\n        */\n      },\n\n      currentEvents: []\n    };\n  },\n  methods: {\n    handleWeekendsToggle() {\n      this.calendarOptions.weekends = !this.calendarOptions.weekends; // update a property\n    },\n\n    handleDateSelect(selectInfo) {\n      let title = prompt('Please enter a new title for your event');\n      let calendarApi = selectInfo.view.calendar;\n      calendarApi.unselect(); // clear date selection\n      if (title) {\n        calendarApi.addEvent({\n          id: createEventId(),\n          title,\n          start: selectInfo.startStr,\n          end: selectInfo.endStr,\n          allDay: selectInfo.allDay\n        });\n      }\n    },\n    handleEventClick(clickInfo) {\n      if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n        clickInfo.event.remove();\n      }\n    },\n    handleEvents(events) {\n      this.currentEvents = events;\n    }\n  }\n};","map":{"version":3,"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;EACAA;IACAC;EACA;;EACAC;IACA;MACAC;QACAC,UACAC,eACAC,gBACAC;QAAA,CACA;;QACAC;UACAC;UACAC;UACAC;QACA;QACAC;QACAC;QAAA;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACA;AACA;AACA;AACA;AACA;MACA;;MACAC;IACA;EACA;EACAC;IACAC;MACA;IACA;;IACAC;MACA;MACA;MACAC;MACA;QACAA;UACAC;UACAC;UACAC;UACAC;UACAC;QACA;MACA;IACA;IACAC;MACA;QACAC;MACA;IACA;IACAC;MACA;IACA;EACA;AACA","names":["components","FullCalendar","data","calendarOptions","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","headerToolbar","left","center","right","initialView","initialEvents","editable","selectable","selectMirror","dayMaxEvents","weekends","select","eventClick","eventsSet","currentEvents","methods","handleWeekendsToggle","handleDateSelect","calendarApi","id","title","start","end","allDay","handleEventClick","clickInfo","handleEvents"],"sourceRoot":"src/views","sources":["MainView.vue"],"sourcesContent":["<script>\r\nimport FullCalendar from '@fullcalendar/vue'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport interactionPlugin from '@fullcalendar/interaction'\r\nimport { INITIAL_EVENTS, createEventId } from './event-utils'\r\nexport default {\r\n  components: {\r\n    FullCalendar // make the <FullCalendar> tag available\r\n  },\r\n  data: function() {\r\n    return {\r\n      calendarOptions: {\r\n        plugins: [\r\n          dayGridPlugin,\r\n          timeGridPlugin,\r\n          interactionPlugin // needed for dateClick\r\n        ],\r\n        headerToolbar: {\r\n          left: 'prev,next today',\r\n          center: 'title',\r\n          right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n        },\r\n        initialView: 'dayGridMonth',\r\n        initialEvents: INITIAL_EVENTS, // alternatively, use the `events` setting to fetch from a feed\r\n        editable: true,\r\n        selectable: true,\r\n        selectMirror: true,\r\n        dayMaxEvents: true,\r\n        weekends: true,\r\n        select: this.handleDateSelect,\r\n        eventClick: this.handleEventClick,\r\n        eventsSet: this.handleEvents\r\n        /* you can update a remote database when these fire:\r\n        eventAdd:\r\n        eventChange:\r\n        eventRemove:\r\n        */\r\n      },\r\n      currentEvents: []\r\n    }\r\n  },\r\n  methods: {\r\n    handleWeekendsToggle() {\r\n      this.calendarOptions.weekends = !this.calendarOptions.weekends // update a property\r\n    },\r\n    handleDateSelect(selectInfo) {\r\n      let title = prompt('Please enter a new title for your event')\r\n      let calendarApi = selectInfo.view.calendar\r\n      calendarApi.unselect() // clear date selection\r\n      if (title) {\r\n        calendarApi.addEvent({\r\n          id: createEventId(),\r\n          title,\r\n          start: selectInfo.startStr,\r\n          end: selectInfo.endStr,\r\n          allDay: selectInfo.allDay\r\n        })\r\n      }\r\n    },\r\n    handleEventClick(clickInfo) {\r\n      if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\r\n        clickInfo.event.remove()\r\n      }\r\n    },\r\n    handleEvents(events) {\r\n      this.currentEvents = events\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n\r\n</template>\r\n\r\n<style lang='css'>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}